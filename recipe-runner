#!/usr/bin/python
# This Python file uses the following encoding: utf-8

# Recipe Runner
# Copyright 2015 Elliot Jordan
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


"""
recipe-runner

Tests the AutoPkg recipes at the specified path and compiles a status report
for your reference.

usage: recipe-runner [-h] [--skip SKIP] search_path

positional arguments:
  search_path  Path to search recursively for AutoPkg recipes.

optional arguments:
  -h, --help   show this help message and exit
  --skip SKIP  Recipe type (e.g. download, pkg, munki) to skip.
"""


import argparse
from datetime import datetime
import os
import shlex
from subprocess import Popen, PIPE


def build_argument_parser():

    parser = argparse.ArgumentParser(
        description="Tests the AutoPkg recipes at the specified path and "
                    "compiles a status report for your reference.")
    parser.add_argument(
        "search_path",
        help="Path to search recursively for AutoPkg recipes.")
        # TODO(Elliot): Allow skipping multiple types.
    parser.add_argument(
        "--skip",
        action="store",
        help="Recipe type (e.g. download, pkg, munki) to skip.")
        # TODO(Elliot): Add the opposite of --skip. Maybe --include-only?
    return parser


def get_exitcode_stdout_stderr(cmd):
    """Execute the external command and get its exitcode, stdout and stderr.

    Args:
        cmd: The shell command to be executed.

    Returns:
        exitcode: Zero upon success. Non-zero upon error.
        out: String from standard output.
        err: String from standard error.
    """

    if "|" in cmd:
        cmd_parts = cmd.split("|")
    else:
        cmd_parts = [cmd]

    i = 0
    p = {}
    for cmd_part in cmd_parts:
        cmd_part = cmd_part.strip()
        if i == 0:
            p[i]=Popen(shlex.split(cmd_part), stdin=None, stdout=PIPE, stderr=PIPE)
        else:
            p[i]=Popen(shlex.split(cmd_part), stdin=p[i-1].stdout, stdout=PIPE, stderr=PIPE)
        i = i + 1

    out, err = p[i-1].communicate()
    exitcode = p[i-1].returncode

    return exitcode, out, err


def main():

    # Parse arguments.
    argparser = build_argument_parser()
    args = argparser.parse_args()

    output = "\"RECIPE PATH\",\"LAST RUN\",\"RUN RESULT\""

    # Walk search path looking for recipes.
    search_path = os.path.expanduser(args.search_path).rstrip("/")
    for root, dirs, files in os.walk(search_path):

        for dirname in dirs:
            if dirname.startswith((".", "_")):
                dirs.remove(dirname)

        for filename in files:
            if filename.endswith(".recipe"):

                recipe_path = os.path.relpath(os.path.join(search_path, root, filename))

                if filename.endswith(".%s.recipe" % args.skip):
                    print "Skipping %s..." % recipe_path
                    output += "\n\"%s\",\"%s\",\"SKIPPED\"" % (recipe_path, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

                else:

                    print "Testing %s..." % recipe_path
                    cmd = "autopkg run \"%s\"" % recipe_path
                    exitcode, out, err = get_exitcode_stdout_stderr(cmd)

                    if exitcode == 0:
                        output += "\n\"%s\",\"%s\",\"OK\"" % (recipe_path, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                    else:
                        output += "\n\"%s\",\"%s\",\"ERROR: %s\"" % (recipe_path, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), err)

                with open("%s/recipe_runner_results.csv" % search_path, "wb") as output_file:
                    output_file.write(output)

    print "\nAll done. You can find the results at %s/recipe_runner_results.csv." % search_path


if __name__ == '__main__':
    main()
